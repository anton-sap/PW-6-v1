---
# Uninstall old Versions
- name: Uninstall old versions while Debian
  ansible.builtin.apt:
    name: "{{ item }}"
    state: absent
  with_items:
    - docker-engine
    - docker.io
    - containerd
    - runc
  when:
    - ansible_facts['os_family'] == "Debian"
- name: Uninstall old versions while Centos
  ansible.builtin.yum:
    name: "{{ item }}"
    state: absent
  with_items:
    - docker
    - docker-client
    - docker-client-latest
    - docker-common
    - docker-latest
    - docker-latest-logrotate
    - docker-logrotate
    - docker-engine
  when:
    - ansible_facts['os_family'] == "RedHat"
# Setup Docker repo
- name:  Install required pkgs while Ubuntu
  ansible.builtin.apt:
    name: "{{ item }}"
  with_items:
    - ca-certificates
    - curl
    - gnupg
    - python3-apt
  when:
    - ansible_facts['os_family'] == "Debian"
- name: Copy Script to setup Docker repo
  ansible.builtin.copy:
    src: files/tmp/setup_docker_repo.sh
    dest: /tmp/setup_docker_repo.sh
  when:
    - ansible_facts['os_family'] == "Debian"
- name: Execute Script
  ansible.builtin.command: sh /tmp/setup_docker_repo.sh
  when:
    - ansible_facts['os_family'] == "Debian"
  notify:
    - apt_update
- name: Install latest docker version
  ansible.builtin.apt:
    name: "{{ item }}"
  with_items:
    - docker-ce
    - docker-ce-cli
    - containerd.io
    - docker-buildx-plugin
    - docker-compose-plugin
  when:
    - ansible_facts['os_family'] == "Debian"